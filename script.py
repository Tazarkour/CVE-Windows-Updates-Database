import subprocess as sp
import json
from urllib.request import urlopen
import requests
from dataclasses import dataclass
import sys


@dataclass
class VulSmall:
	CVE_ID: str
	ID: str
	def __init__(self,CVE_ID : str,ID : str):
		self.CVE_ID=CVE_ID
		self.ID=ID


@dataclass
class Vulnrability:
	CVE_ID: str
	Impact:str
	Severity:str 
	baseScore:str 
	temporalScore:str 

	def __init__(self,CVE_ID : str,Impact : str,Severity : str,baseScore : str,temporalScore : str):
		self.CVE_ID=CVE_ID
		self.Impact=Impact
		self.Severity=Severity 
		self.baseScore=baseScore
		self.temporalScore=temporalScore

@dataclass
class Win_Update:
	Article: str
	OS:str
	Release_Date:str 

	def __init__(self,Article : str,OS : str,Release_Date : str):
		self.Article=Article
		self.OS=OS 
		self.Release_Date=Release_Date




def generate_menu():
	print ("1-View Your Updates  ")
	print ("2-View Vulnrabilities that are fixed by your updates ")
	print ("3-Search for Vulnrability ")
	print ("3-View Vulnrabilities that can affect you")
	print ("0-Exit")

def get_cve_json(CVE_ID):
	url = 'http://127.0.0.1:5000/SearchUpdateByCVE?CVE_ID='+CVE_ID
	response = urlopen(url)
	json_obj = json.load(response)
	return json_obj

def get_Article_json(Article):
	url = 'http://127.0.0.1:5000/SearchCVEByUpdates?Article='+Article
	response = urlopen(url)
	json_obj = json.load(response)
	return json_obj

def get_OS(OS, Type):
	url = 'http://127.0.0.1:5000/SearchCVEByOS?OS='+str(OS)+'&Type='+str(Type)
	response = urlopen(url)
	json_obj = json.load(response)
	return json_obj	


def get_CVE_From_Api(Article):
	A=[]
	json_obj=get_Article_json(Article)
	for j in json_obj:
		CVE_ID=j['CVE_ID']
		Impact=j['Impact']
		Severity=j['Severity']
		baseScore=j['baseScore']
		temporalScore=j['temporalScore']
		V=Vulnrability(CVE_ID,Impact,Severity,baseScore,temporalScore)	
		print (V)
		A.append(V)
	return A

def get_CVE_From_OS(OS, Type):
	A=[]
	json_obj=get_OS(OS, Type)
	for j in json_obj:
		CVE_ID=j['CVE_ID']
		A.append(CVE_ID)
	return A

def get_Update_From_Api(CVE_ID):
	A=[]
	json_obj=get_cve_json(CVE_ID)
	for j in json_obj:
		Article=j['Article']
		OS=j['OS']
		Release_Date=j['Release_Date']
		W=Win_Update(Article,OS,Release_Date)	
		A.append(W)
	return A


def test_cve_exists(CVE_ID):
		request = requests.get('http://127.0.0.1:5000/SearchUpdateByCVE?CVE_ID='+str(CVE_ID))
		if request.status_code == 200:
				return True
		else:
				return False

def test_OS_exists(OS, Type):
		request = requests.get('http://127.0.0.1:5000/SearchCVEByOS?OS='+str(OS)+'&Type='+str(Type))
		if request.status_code == 200:
				return True
		else:
				return False

def test_Update_exists(Article):
		request = requests.get('http://127.0.0.1:5000/SearchCVEByUpdates?Article='+str(Article))
		if request.status_code == 200:
				return True
		else:
				return False                
C=1
Update_list=[]
output = sp.getoutput('wmic qfe get HotFixID')
cmd ='(Get-Item "HKLM:SOFTWARE/Microsoft/Windows NT/CurrentVersion").GetValue("DisplayVersion")'
completed = sp.run(["powershell", "-Command", cmd], capture_output=True)
ver=completed.stdout.decode("utf-8")
print(ver)
type= sp.getoutput('systeminfo | findstr /B /C:"System Type:"')
type = type.replace("PC", "")
type = type.replace("System Type:", "")
type = type.replace(" ", "")
ver=ver.replace("\r\n","")
my_list = output.split("\n")
for i in my_list :
	if i == '':
		my_list.remove(i)
for i in my_list :
	if i == '':
		my_list.remove(i)
for i in my_list :
	if 'HotFixID' in i:
		my_list.remove(i)		
for i in my_list :	
	Update_list.append(" ".join(i.split()))


'''print (get_CVE_From_Api("3147461"))'''
if len(sys.argv)==1:
	while C!=0:
		generate_menu()
		C=int(input("Choose Option : "))
		if C==1:
			print ("Updates : ")
			for i in Update_list:
				print (i)
		elif C==2:
			print ("Vulnrabilities that you are imnue to : ")
			for i in Update_list:
				if (test_Update_exists(i.replace('KB',''))):
					V=get_CVE_From_Api(i.replace('KB',''))
					print ("Hotfix "+i+" fixes : ")
					for k in V:
						print ("CVE_ID : "+K.CVE_ID+", Severity : "+K.Severity+", Base Score : "+K.baseScore)
		elif C==3:
			F=input("Insert CVE ID : CVE-")
			CV="CVE-"+F
			if test_cve_exists(CV):
				A=get_Update_From_Api(CV)
				CVE_Fixed=False
				F=[]
				for i in Update_list:
					for j in A:
						if i==("KB"+j.Article):
							CVE_Fixed=True
							F.append(i)
				if CVE_Fixed :
					print ("This Vulnrability Was Fixed On your PC From : ")
					for k in F:
						print(k)
				else :	
					print ("This Vulnrability is still not Fixed On your PC From ")	
				print ("Updates That fix this Vulnrability : ")
				for i in A:
					print ("KB"+i.Article+" for "+i.OS+" Released "+i.Release_Date)	
			else:
				print ("CVE Not Found")
		elif C==4:
			if test_OS_exists(ver, ver):
				P=get_CVE_From_OS(ver, ver)
				L=P
				for i in Update_list:
					if (test_Update_exists(i.replace('KB',''))):
						V=get_CVE_From_Api(i.replace('KB',''))
						print ("Hotfix "+i+" fixes : ")
						for k in V:
							for N in P:
								if k.CVE_ID==N:
									L.remove(k.CVE_ID)
				print ("Vous Etes Suceptibles a ces Vulnrabilities : ")
				for i in L:
					print (i)											


elif len(sys.argv)==2 :
	if  sys.argv[1]=="-U" or sys.argv[1]=="-u":
		print ("Updates : ")
		for i in Update_list:
			print (i)
	elif sys.argv[1]=="-V" or sys.argv[1]=="-v":
		print ("Vulnrabilities that you are imnue to : ")
		for i in Update_list:
			if (test_Update_exists(i.replace('KB',''))):
				V=get_CVE_From_Api(i.replace('KB',''))
				print ("Hotfix "+i+" fixes : ")
				for k in V:
					print ("CVE_ID : "+K.CVE_ID+", Severity : "+K.Severity+", Base Score : "+K.baseScore)
	elif sys.argv[1]=="-C" or sys.argv[1]=="-c":		
		F=input("Insert CVE ID : CVE-")
		CV="CVE-"+F
		if test_cve_exists(CV):
			A=get_Update_From_Api(CV)
			CVE_Fixed=False
			F=[]
			for i in Update_list:
				for j in A:
					if i==("KB"+j.Article):
						CVE_Fixed=True
						F.append(i)
			if CVE_Fixed :
				print ("This Vulnrability Was Fixed On your PC From : ")
				for k in F:
					print(k)
			else :	
				print ("This Vulnrability is still not Fixed On your PC From ")	
				print ("Updates That fix this Vulnrability : ")
				for i in A:
					print ("KB"+i.Article+" for "+i.OS+" Released "+i.Release_Date)	
		else:
			print ("CVE Not Found")
	elif	sys.argv[1]=="-O" or sys.argv[1]=="-o":	
		if test_OS_exists(ver, ver):
				P=get_CVE_From_OS(ver, ver)
				L=P
				for i in Update_list:
					if (test_Update_exists(i.replace('KB',''))):
						V=get_CVE_From_Api(i.replace('KB',''))
						print ("Hotfix "+i+" fixes : ")
						for k in V:
							for N in P:
								if k.CVE_ID==N:
									L.remove(k.CVE_ID)
				print ("Vous Etes Suceptibles a ces Vulnrabilities : ")
				for i in L:
					print (i)
	elif sys.argv[1]=="--help" or 	sys.argv[1]=="-H":
		f = open('Readme.txt', 'r')	
		file_contents = f.read()
		print (file_contents)
		f.close()		
	else :
		print ("Error Argument")						
elif len(sys.argv)==3 :
	if sys.argv[1]=="-C" or sys.argv[1]=="-c":		
		CV=sys.argv[2]
		if test_cve_exists(CV):
			A=get_Update_From_Api(CV)
			CVE_Fixed=False
			F=[]
			for i in Update_list:
				for j in A:
					if i==("KB"+j.Article):
						CVE_Fixed=True
						F.append(i)
			if CVE_Fixed :
				print ("This Vulnrability Was Fixed On your PC From : ")
				for k in F:
					print(k)
			else :	
				print ("This Vulnrability is still not Fixed On your PC From ")	
				print ("Updates That fix this Vulnrability : ")
				for i in A:
					print ("KB"+i.Article+" for "+i.OS+" Released "+i.Release_Date)	
		else:
			print ("CVE Not Found")



					




						